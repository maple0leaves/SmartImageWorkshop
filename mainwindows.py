# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindows.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

#自适应大小，放大和缩小组件都要跟着动
#在self.centralwidget中添加girdLayout，然后在合适的行列中添加widget，然后再添加girdlayout
#在gridlayout添加2x4=8个button

from PyQt5 import QtCore
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QFont, QCursor, QPixmap, QIcon
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QLineEdit, QPushButton, \
    QGridLayout, QVBoxLayout, QHBoxLayout, QMenuBar, QStatusBar, QSizePolicy,QTextEdit

from tools.common_helper import CommonHelper
from tools.MyLabel import MyQLabel
from windows.adaptwidget import adaptwidget
from windows.animewidget import animewidget
from windows.filterwindow import filterwindow
from windows.idwidget import idwidget
from windows.mattingwidget import mattingwidget
from windows.morewidget import morewidget
from windows.mosaicwidget import mosaicwidget
from windows.sketchwidget import sketchwidget

'''
QtWidgets.QWidget()感觉就是在哪个控件上生成一个QWidget，就是父控件和子控件
'''




class Ui_MainWindow(object):
    '''MainWindow->centralwidget->cwgridLayout-->1.titlelabel2.labelwidget
        ->gridLayout_2 in labelwidget->8label in gridLayout_2
    '''
    '''这自动生成的代码有够逆天的，实例变量都不放在__init__里面'''
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        #set logo and Window name
        MainWindow.setWindowTitle("智能图像工坊")
        MainWindow.setWindowIcon(QIcon('./images/logo.png'))
        # 获取显示器分辨率
        self.desktop = QApplication.desktop()
        self.screenRect = self.desktop.screenGeometry()
        self.screenheight = self.screenRect.height()
        self.screenwidth = self.screenRect.width()
        self.height = int(self.screenheight * 0.7)
        self.width = int(self.screenwidth * 0.7)
        #设置大小
        MainWindow.resize(self.width, self.height)
        '''
        QWidget的geometry()提供的成员函数:x()、y()获得客户区左上角的坐标，
        width()、 height()获得客户区的宽度和高度；
        '''

        self.centralwidget = QWidget(MainWindow)
        #给centralwidget命名
        self.centralwidget.setObjectName("centralwidget")
        self.cwgridLayout = QGridLayout()
        self.cwgridLayout.setRowStretch(0,1)
        self.cwgridLayout.setRowStretch(1,1)
        self.centralwidget.setLayout(self.cwgridLayout)
        self.centralwidget.setStyleSheet('QWidget{background-color:white;}')

        #this titlelabel use to show some result imgs
        #chang img in titlelabel a period of time
        self.titlelabel = MyQLabel('title')
        self.n = 1
        self.lu = "./images/img" + str(self.n) + ".png"
        self.pm = QPixmap(self.lu)
        self.titlelabel.setPixmap(self.pm)
        #set img suit label automatically
        # self.titlelabel.setScaledContents(True)
        # self.titlelabel.connect_customized()
        self.timer1 = QTimer(MainWindow)
        self.timer1.timeout.connect(self.timer_TimeOut)
        self.timer1.start(2000)  # 图片间隔时长


        #设置文字居中
        self.titlelabel.setAlignment(QtCore.Qt.AlignCenter)
        #set font style
        # font1 = QFont('Arial', 50)
        # self.titlelabel.setFont(font1)
        #put titlelabel in cwgridLayout
        self.cwgridLayout.addWidget(self.titlelabel,0,0,1,1)
        '''
        QtWidgets.QWidget是PyQt5
        中的一个基类，它提供了构建用户界面的基本元素。可以将QWidget
        理解为窗口或者屏幕上的一块矩形区域，我们可以在这个区域内放置其他控件
        （比如按钮、标签等）以及自定义绘制操作。'''
        #create a widget object then put gridLayout_2 in it
        #then put 8 label in gridLayout_2
        self.labelWidget = QWidget()
        #估计是行列超过了范围就会自适应大小
        self.cwgridLayout.addWidget(self.labelWidget,1,0,2,1)
        #QRect类在平面上定义了一个矩形，使用整数作为精度，左上角及宽，高
        #一个矩形正常来说是有一个左上角的点和一个尺寸来确定的
        # self.labelWidget.setGeometry(QtCore.QRect(0, 270, 1031, 351))
        #以下是为了自适应不同分辨率显示器
        #这里生成Widget
        # create a gridlayout_2 object in order to put 8 label
        self.gridLayout_2 = QGridLayout()
        self.labelWidget.setLayout(self.gridLayout_2)
        #设置Margins (left,top,right,bottom) 默认白色
        self.gridLayout_2.setContentsMargins(20, 0, 20, 0)
        #设置网格之间的间隙
        self.gridLayout_2.setSpacing(40)
        # 设置垂直网格间距：setVerticalSpacing(spacing)
        # 设置水平网格间距：setHorizontalSpacing(spacing)
        self.gridLayout_2.setObjectName("gridLayout_2")

        # create 8 label and set their style,action.
        # 加载QSS样式文件
        self.stylefile = 'style.qss'
        self.qssstyle = CommonHelper.readQSS(self.stylefile)

        #设置8个label
        self.set8Label()
        #给MainWindow设置中心Widget
        MainWindow.setCentralWidget(self.centralwidget)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def set8Label(self):

        '''如果想要把label中的图片变成动态的话，那鼠标悬浮的时候替换的图片可以
            是不重叠，图象有位移差的，也就是说没悬浮的时候图片和悬浮时候的图片有位移差
            不单单是换底色，不过这实现起来有点麻烦
        '''
        self.stylefile = 'style.qss'
        self.qssstyle = CommonHelper.readQSS(self.stylefile)

        #智能人像抠图label
        self.mattingLabel = MyQLabel()
        self.mattingLabel.setObjectName('mattinglabel')
        self.mattingLabel.connect_customized(lambda :self.clicknew(0))
        # 鼠标悬浮时变成手型
        self.mattingLabel.setCursor(QCursor(Qt.PointingHandCursor))
        self.mattingLabel.setStyleSheet(self.qssstyle)
        # 需要使用样式表来设置pushbutton 样式，QSS
        self.mattingLabel.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.gridLayout_2.addWidget(self.mattingLabel, 0, 0, 1, 1)

        #智能动漫风格label
        self.animelabel = MyQLabel()
        self.animelabel.setObjectName('animelabel')
        self.animelabel.connect_customized(lambda :self.clicknew(1))
        # 鼠标悬浮时变成手型
        self.animelabel.setCursor(QCursor(Qt.PointingHandCursor))
        self.animelabel.setStyleSheet(self.qssstyle)
        #设置label随着布局大小变化
        self.animelabel.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.gridLayout_2.addWidget(self.animelabel, 0, 1, 1, 1)

        #图像微调label
        self.adaptlabel = MyQLabel()
        self.adaptlabel.setObjectName('adaptlabel')
        self.adaptlabel.connect_customized(lambda :self.clicknew(2))
        # 鼠标悬浮时变成手型
        self.adaptlabel.setCursor(QCursor(Qt.PointingHandCursor))
        self.adaptlabel.setStyleSheet(self.qssstyle)
        # 设置label随着布局大小变化
        self.adaptlabel.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.gridLayout_2.addWidget(self.adaptlabel, 0, 2, 1, 1)

        #滤镜label
        self.filterlabel = MyQLabel()
        self.filterlabel.setObjectName('filterlabel')
        self.filterlabel.connect_customized(lambda :self.clicknew(3))
        # 鼠标悬浮时变成手型
        self.filterlabel.setCursor(QCursor(Qt.PointingHandCursor))
        self.filterlabel.setStyleSheet(self.qssstyle)
        # 设置label随着布局大小变化
        self.filterlabel.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.gridLayout_2.addWidget(self.filterlabel, 0, 3, 1, 1)

        #素描label
        self.sketchlabel = MyQLabel()
        self.sketchlabel.setObjectName('sketchlabel')
        self.sketchlabel.connect_customized(lambda :self.clicknew(4))
        # 鼠标悬浮时变成手型
        self.sketchlabel.setCursor(QCursor(Qt.PointingHandCursor))
        self.sketchlabel.setStyleSheet(self.qssstyle)
        # 设置label随着布局大小变化
        self.sketchlabel.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.gridLayout_2.addWidget(self.sketchlabel, 1, 0, 1, 1)

        #马赛克label
        self.mosaiclabel = MyQLabel()
        self.mosaiclabel.setObjectName('mosaiclabel')
        self.mosaiclabel.connect_customized(lambda :self.clicknew(5))
        # 鼠标悬浮时变成手型
        self.mosaiclabel.setCursor(QCursor(Qt.PointingHandCursor))
        self.mosaiclabel.setStyleSheet(self.qssstyle)
        # 设置label随着布局大小变化
        self.mosaiclabel.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.gridLayout_2.addWidget(self.mosaiclabel, 1, 1, 1, 1)

        #证件照换底label
        self.idlabel = MyQLabel()
        self.idlabel.setObjectName('idlabel')
        self.idlabel.connect_customized(lambda :self.clicknew(6))
        # 鼠标悬浮时变成手型
        self.idlabel.setCursor(QCursor(Qt.PointingHandCursor))
        self.idlabel.setStyleSheet(self.qssstyle)
        # 设置label随着布局大小变化
        self.idlabel.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.gridLayout_2.addWidget(self.idlabel, 1, 2, 1, 1)

        #更多label
        self.morelabel = MyQLabel()
        self.morelabel.setObjectName('morelabel')
        self.morelabel.connect_customized(lambda :self.clicknew(7))
        # 鼠标悬浮时变成手型
        self.morelabel.setCursor(QCursor(Qt.PointingHandCursor))
        self.morelabel.setStyleSheet(self.qssstyle)
        # 设置label随着布局大小变化
        self.morelabel.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.gridLayout_2.addWidget(self.morelabel, 1, 3, 1, 1)
    def timer_TimeOut(self):
        self.n += 1
        if self.n > 3:
            self.n = 1
        self.lu = "./images/img" + str(self.n) + ".png"
        self.pm = QPixmap(self.lu)
        self.titlelabel.setPixmap(self.pm)

    def clicknew(self,index):
        if index==0:
            self.maw = mattingwidget()
            self.maw.show()
        elif index==1:
            self.aw = animewidget()
            self.aw.show()
        elif index==2:
            self.adw = adaptwidget()
            self.adw.show()
        elif index==3:
            self.fw = filterwindow()
            self.fw.show()
        elif index==4:
            self.sw = sketchwidget()
            self.sw.show()
        elif index==5:
            self.mw = mosaicwidget()
            self.mw.show()
        elif index==6:
            self.iw= idwidget()
            self.iw.show()
        elif index==7:
            self.mow = morewidget()
            self.mow.show()
        else:
            pass
'''
1.弄8套QLabel images  
2.还是不要用for循环来实现了，直接实现8个不同的QLabel吧，虽然用循环实现会更妙一点，但是这是后期
代码优化的事情，现在要做的是简单易懂的实现功能
3.在title中实现图片轮播，还有时间的话就实现监听事件跳转到不同的功能
4.然后再设计功能窗口，这是后话

'''